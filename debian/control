Source: yarl
Section: python
Priority: optional
Maintainer: Pexip AS <packaging@pexip.com>
XSBC-Pexip-Original-Maintainer: Piotr Ożarowski <piotr@debian.org>
XSBC-Pexip-Original-Uploaders: Debian Python Team <team+python@tracker.debian.org>
Build-Depends: debhelper-compat (= 12), dh-python (>= 2),
               cython3,
               python3-all-dev,
               python3-setuptools,
               python3-sphinx (>= 1.3),
               python3-idna (>= 2.0),
               python3-multidict (>= 4.0.0),
               python3-pytest <!nocheck>,
               python3-pytest-runner <!nocheck>,
               python3-pytest-cov <!nocheck>,
Standards-Version: 4.5.0
Homepage: https://github.com/aio-libs/yarl/
Vcs-Git: https://salsa.debian.org/python-team/packages/yarl.git
Vcs-Browser: https://salsa.debian.org/python-team/packages/yarl
Testsuite: autopkgtest-pkg-python
XS-Pexip-Upstream: http://ftp.debian.org/debian/ bullseye

Package: python3-yarl
Architecture: any
Depends: ${misc:Depends}, ${python3:Depends}, ${shlibs:Depends},
Recommends: ${python3:Recommends}
Suggests: ${python3:Suggests}
Description: yet another URL library for Python
 URL is constructed from `str`:
 .
  >>> from yarl import URL
  >>> url = URL('https://www.python.org/~guido?arg=1#frag')
  >>> url
  URL('https://www.python.org/~guido?arg=1#frag')
 .
 All URL parts: scheme, user, passsword, host, port, path, query and fragment
 are accessible by properties:
 .
  >>> url.scheme
  'https'
  >>> url.host
  'www.python.org'
  >>> url.path
  '/~guido'
  >>> url.query_string
  'arg=1'
  >>> url.query
  <MultiDictProxy('arg': '1')>
  >>> url.fragment
  'frag'
 .
 All URL manipulations produces a new URL object:
 .
  >>> url.parent / 'downloads/source'
  URL('https://www.python.org/downloads/source')
 .
 Strings passed to constructor and modification methods are automatically
 encoded giving canonical representation as result::
 .
  >>> url = URL('https://www.python.org/Ð¿ÑƒÑ‚ÑŒ')
  >>> url
  URL('https://www.python.org/%D0%BF%D1%83%D1%82%D1%8C')
 .
 Regular properties are percent-decoded, use `raw_` versions for getting
 encoded strings:
 .
  >>> url.path
  '/Ð¿ÑƒÑ‚ÑŒ'
 .
  >>> url.raw_path
  '/%D0%BF%D1%83%D1%82%D1%8C'
 .
 Human readable representation of URL is available as `.human_repr()`:
 .
  >>> url.human_repr()
  'https://www.python.org/Ð¿ÑƒÑ‚ÑŒ'

Package: python-yarl-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${sphinxdoc:Depends}
Multi-Arch: foreign
Description: documentation for the yarl Python library
 URL is constructed from `str`:
 .
  >>> from yarl import URL
  >>> url = URL('https://www.python.org/~guido?arg=1#frag')
  >>> url
  URL('https://www.python.org/~guido?arg=1#frag')
 .
 All URL parts: scheme, user, passsword, host, port, path, query and fragment
 are accessible by properties:
 .
  >>> url.scheme
  'https'
  >>> url.host
  'www.python.org'
  >>> url.path
  '/~guido'
  >>> url.query_string
  'arg=1'
  >>> url.query
  <MultiDictProxy('arg': '1')>
  >>> url.fragment
  'frag'
 .
 All URL manipulations produces a new URL object:
 .
  >>> url.parent / 'downloads/source'
  URL('https://www.python.org/downloads/source')
 .
 Strings passed to constructor and modification methods are automatically
 encoded giving canonical representation as result::
 .
  >>> url = URL('https://www.python.org/Ð¿ÑƒÑ‚ÑŒ')
  >>> url
  URL('https://www.python.org/%D0%BF%D1%83%D1%82%D1%8C')
 .
 Regular properties are percent-decoded, use `raw_` versions for getting
 encoded strings:
 .
  >>> url.path
  '/Ð¿ÑƒÑ‚ÑŒ'
 .
  >>> url.raw_path
  '/%D0%BF%D1%83%D1%82%D1%8C'
 .
 Human readable representation of URL is available as `.human_repr()`:
 .
  >>> url.human_repr()
  'https://www.python.org/Ð¿ÑƒÑ‚ÑŒ'
 .
 This package provides documentation for yarl
